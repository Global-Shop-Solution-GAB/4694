Program.Sub.ScreenSU.Start
Gui.fPL4ExpMaint..Create
Gui.fPL4ExpMaint..Caption("Product line selection for Export to Concur")
Gui.fPL4ExpMaint..Size(5535,4410)
Gui.fPL4ExpMaint..MinX(0)
Gui.fPL4ExpMaint..MinY(0)
Gui.fPL4ExpMaint..Position(0,0)
Gui.fPL4ExpMaint..BackColor(-2147483633)
Gui.fPL4ExpMaint..MousePointer(0)
Gui.fPL4ExpMaint..Event(UnLoad,fPL4ExpMaint_UnLoad)
Gui.fPL4ExpMaint.lvwPL.Create(ListView)
Gui.fPL4ExpMaint.lvwPL.Size(2085,2880)
Gui.fPL4ExpMaint.lvwPL.Position(105,510)
Gui.fPL4ExpMaint.lvwPL.View(3)
Gui.fPL4ExpMaint.lvwPL.AddListViewColumn("Select Product Lines",1800,0)
Gui.fPL4ExpMaint.lvwPL.BorderStyle(1)
Gui.fPL4ExpMaint.cmdSaveConf.Create(Button)
Gui.fPL4ExpMaint.cmdSaveConf.Size(1935,375)
Gui.fPL4ExpMaint.cmdSaveConf.Position(120,3465)
Gui.fPL4ExpMaint.cmdSaveConf.Caption("Save PL List")
Gui.fPL4ExpMaint.cmdSaveConf.Event(Click,cmdSaveConf_Click)
Gui.fPL4ExpMaint.cmdPopLst.Create(Button)
Gui.fPL4ExpMaint.cmdPopLst.Size(525,375)
Gui.fPL4ExpMaint.cmdPopLst.Position(2460,1320)
Gui.fPL4ExpMaint.cmdPopLst.Caption(">>")
Gui.fPL4ExpMaint.cmdPopLst.Event(Click,cmdPopLst_Click)
Gui.fPL4ExpMaint.cmdUnPopLst.Create(Button)
Gui.fPL4ExpMaint.cmdUnPopLst.Size(525,375)
Gui.fPL4ExpMaint.cmdUnPopLst.Position(2445,1875)
Gui.fPL4ExpMaint.cmdUnPopLst.Caption("<<")
Gui.fPL4ExpMaint.cmdUnPopLst.Event(Click,cmdUnPopLst_Click)
Gui.fPL4ExpMaint.lvwSelPL.Create(ListView)
Gui.fPL4ExpMaint.lvwSelPL.Size(2100,2880)
Gui.fPL4ExpMaint.lvwSelPL.Position(3210,555)
Gui.fPL4ExpMaint.lvwSelPL.View(3)
Gui.fPL4ExpMaint.lvwSelPL.Multiselect(True)
Gui.fPL4ExpMaint.lvwSelPL.AddListViewColumn("Product Lines selected",1800,0)
Gui.fPL4ExpMaint.lvwSelPL.BorderStyle(1)
Gui.fExpToConcur..Create
Gui.fExpToConcur..Size(5865,1680)
Gui.fExpToConcur..MinX(0)
Gui.fExpToConcur..MinY(0)
Gui.fExpToConcur..Position(0,0)
Gui.fExpToConcur..BackColor(-2147483633)
Gui.fExpToConcur..MousePointer(0)
Gui.fExpToConcur..Caption("Generate File for Export to Concur")
Gui.fExpToConcur..Event(UnLoad,UnLoad_all)
Gui.fExpToConcur.txtExpPath.Create(TextBox,"",True,5025,300,0,135,375,True,0,"Arial",8,-2147483643,1)
Gui.fExpToConcur.txtExpPath.Locked(True)
Gui.fExpToConcur.cmdBrfolder.Create(Button)
Gui.fExpToConcur.cmdBrfolder.Size(360,345)
Gui.fExpToConcur.cmdBrfolder.Position(5280,360)
Gui.fExpToConcur.cmdBrfolder.Caption("^")
Gui.fExpToConcur.cmdBrfolder.Event(Click,cmdBrfolder_Click)
Gui.fExpToConcur.lbl1.Create(Label,"Select Export File Path",True,1935,255,0,135,120,True,0,"Arial",8,-2147483633,0)
Gui.fExpToConcur.cmdExpPath.Create(Button)
Gui.fExpToConcur.cmdExpPath.Size(1410,375)
Gui.fExpToConcur.cmdExpPath.Position(135,750)
Gui.fExpToConcur.cmdExpPath.Caption("Generate File")
Gui.fExpToConcur.cmdExpPath.Event(Click,cmdExpPath_Click)
Gui.fExpToConcur.cmdPLMaint.Create(Button)
Gui.fExpToConcur.cmdPLMaint.Size(1380,375)
Gui.fExpToConcur.cmdPLMaint.Position(1575,750)
Gui.fExpToConcur.cmdPLMaint.Caption("PL Maintenance")
Gui.fExpToConcur.cmdPLMaint.Event(Click,cmdPLMaint_Click)
Gui.fExpToConcur.cmdSaveXPFrmMaint.Create(Button)
Gui.fExpToConcur.cmdSaveXPFrmMaint.Size(1380,375)
Gui.fExpToConcur.cmdSaveXPFrmMaint.Position(2985,750)
Gui.fExpToConcur.cmdSaveXPFrmMaint.Caption("Save Path")
Gui.fExpToConcur.cmdSaveXPFrmMaint.Event(Click,cmdSaveXPFrmMaint_Click)
Gui.FXPPath..Create
Gui.FXPPath..Caption("Save Export Path")
Gui.FXPPath..Size(7725,1590)
Gui.FXPPath..MinX(0)
Gui.FXPPath..MinY(0)
Gui.FXPPath..Position(0,0)
Gui.FXPPath..BackColor(-2147483633)
Gui.FXPPath..MousePointer(0)
Gui.FXPPath..Event(UnLoad,fPL4ExpMaint_UnLoad)
Gui.FXPPath.cmdBrowseFold.Create(Button)
Gui.FXPPath.cmdBrowseFold.Size(360,375)
Gui.FXPPath.cmdBrowseFold.Position(6885,120)
Gui.FXPPath.cmdBrowseFold.Caption("^")
Gui.FXPPath.cmdBrowseFold.Event(Click,cmdBrfolderXP_Click)
Gui.FXPPath.txtXPPathSave.Create(TextBox,"",True,5055,300,0,1740,150,True,0,"Arial",8,-2147483643,1)
Gui.FXPPath.lbl1.Create(Label,"Export Path",True,1290,255,0,180,240,True,0,"Arial",8,-2147483633,0)
Gui.FXPPath.cmdSavePath.Create(Button)
Gui.FXPPath.cmdSavePath.Size(1485,375)
Gui.FXPPath.cmdSavePath.Position(180,630)
Gui.FXPPath.cmdSavePath.Caption("Save")
Gui.FXPPath.cmdSavePath.Event(Click,cmdSavePath_Click)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
v.Global.sEmailBody.Declare(string)
v.Global.bDefaultPath.Declare(Boolean)
v.Global.bUAError.Declare(Boolean)
v.Global.sXPPath.Declare(String)
Program.Sub.Preflight.End

Program.Sub.Main.Start
f.Intrinsic.Control.try
v.Local.sFilePath.Declare(String)
v.Local.bExists.Declare(Boolean)
f.Intrinsic.string.Build("{0}\4694_XP2CONCUR\",v.Caller.GlobalDir,v.Local.sFilePath)
f.Intrinsic.File.DirExists(v.Local.sFilePath,v.Local.bExists)
f.Intrinsic.Control.If(v.local.bExists,=,false)
	f.Intrinsic.File.CreateDir(v.Local.sFilePath)
f.Intrinsic.Control.EndIf

f.ODBC.Connection!conx.opencompanyconnection(999999)
'Launch Maintenance screen
f.Intrinsic.Control.If(v.Caller.Switches,=,"M")
	f.Intrinsic.Control.CallSub(PlExpMaint)
f.Intrinsic.Control.ElseIf(v.Caller.Switches,=,"O")
'launch program from custom menu item
	f.Intrinsic.Control.CallSub(GetXPPath)
	gui.fExpToConcur..Show
f.Intrinsic.Control.ElseIf(v.Caller.Switches,=,"X")
'launch program to save XPPath
	f.Intrinsic.Control.CallSub(GetXPPath)
	f.Intrinsic.Control.CallSub(XPPATH)
f.Intrinsic.Control.Else
'launch from Task Scheduler
	f.Intrinsic.Control.CallSub(GetXPPath)
	f.Intrinsic.Control.CallSub(ExportToConcurUA)
f.Intrinsic.Control.EndIf


f.Intrinsic.Control.catch
f.Intrinsic.Control.CallSub(catching,"sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.cmdPopLst_Click.Start
v.Local.sLstvw1.Declare(string)
v.Local.sLstvw2.Declare(string)
v.Local.iCount.Declare(Long)
v.Local.bCheck.Declare(Boolean)
f.Intrinsic.Control.Try

gui.fPL4ExpMaint.lvwPL.RetrieveSelectedListitems(v.Local.sLstvw1)
f.Intrinsic.Control.If(v.Local.sLstvw1,=,"***NORETURN***")
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.EndIf
f.Data.DataTable.CreateFromString("PopDT",v.Local.sLstvw1,"Name","string","@!@","*!*")

gui.fPL4ExpMaint.lvwSelPL.RetrieveAllListItems(v.Local.sLstvw2)


f.Intrinsic.Control.for(v.Local.iCount,0,v.DataTable.PopDT.RowCount--,1)
	f.Intrinsic.String.IsInString(v.Local.sLstvw2,v.DataTable.PopDT(v.Local.iCount).Name!fieldval,True,v.Local.bCheck)
	f.Intrinsic.Control.If(v.Local.bCheck,<>,true)
		gui.fPL4ExpMaint.lvwSelPL.AddListItem(v.DataTable.PopDT(v.Local.iCount).Name!fieldval,v.DataTable.PopDT(v.Local.iCount).Name!fieldval)
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.Next(v.Local.iCount)
f.Data.DataTable.Close("PopDT")
f.Intrinsic.Control.ExitSub

f.Intrinsic.Control.catch
f.Intrinsic.Control.CallSub(catching,"sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.cmdPopLst_Click.End

Program.Sub.cmdUnPopLst_Click.Start
v.Local.sLstvw1.Declare(string)
v.Local.sLstvw2.Declare(string)
v.Local.iCount.Declare(Long)
v.Local.bCheck.Declare(boolean)
f.Intrinsic.Control.Try
gui.fPL4ExpMaint.lvwSelPL.RetrieveAllListItems(v.Local.sLstvw1)
gui.fPL4ExpMaint.lvwSelPL.RetrieveSelectedListitems(v.Local.sLstVw2)
f.Intrinsic.Control.If(v.Local.sLstvw2,=,"***NORETURN***")
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.EndIf
gui.fPL4ExpMaint.lvwSelPL.RetrieveAllListItems(v.Local.sLstvw1)
f.Data.DataTable.CreateFromString("UnPopDT",v.Local.sLstvw2,"Name","string","@!@","*!*")


f.Intrinsic.Control.For(v.Local.iCount,0,v.DataTable.UnPopDT.RowCount--,1)
	f.Intrinsic.String.Replace(v.Local.sLstvw1,v.DataTable.UnPopDT(v.Local.iCount).Name!fieldval,"%",v.Local.sLstvw1)
f.Intrinsic.Control.Next(v.Local.iCount)
f.Data.DataTable.Close("UnPopDT")

f.Intrinsic.String.Replace(v.Local.sLstvw1,"*!*%*!*","*!*",v.Local.sLstvw1)
f.Intrinsic.String.Replace(v.Local.sLstvw1,"*!*%","",v.Local.sLstvw1)
f.Intrinsic.String.Replace(v.Local.sLstvw1,"%*!*","",v.Local.sLstvw1)
f.Intrinsic.String.Replace(v.Local.sLstvw1,"%","",v.Local.sLstvw1)
gui.fPL4ExpMaint.lvwSelPL.ClearItems
f.Intrinsic.Control.If(v.Local.sLstvw1,<>,"")
	f.Data.DataTable.CreateFromString("PopDT",v.Local.sLstvw1,"Name","string","@!@","*!*")
	f.Intrinsic.Control.for(v.Local.iCount,0,v.DataTable.PopDT.RowCount--,1)
			gui.fPL4ExpMaint.lvwSelPL.AddListItem(v.DataTable.PopDT(v.Local.iCount).Name!fieldval,v.DataTable.PopDT(v.Local.iCount).Name!fieldval)
	f.Intrinsic.Control.Next(v.Local.iCount)
	f.Data.DataTable.Close("PopDT")
f.Intrinsic.Control.EndIf
f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.catch
f.Intrinsic.Control.CallSub(catching,"sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdUnPopLst_Click.End

Program.Sub.catching.Start
v.Local.sError.declare(string)
Function.Intrinsic.String.Concat(v.Ambient.Now,": Project: GCG_4694_ExpForConcur.g2u ",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",v.Args.sub,V.Ambient.NewLine,"Error Occurred ",V.Args.errorno," with description ",V.args.errordesc,V.Local.sError)
f.Intrinsic.UI.Msgbox(v.Local.sError)

f.Intrinsic.Control.CallSub(fPL4ExpMaint_UnLoad)


Program.Sub.catching.End

Program.Sub.catchingUA.Start
v.Local.sError.declare(string)
Function.Intrinsic.String.Concat(v.Ambient.Now,": Project: GCG_4694_ExpForConcur.g2u ",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",v.Args.sub,V.Ambient.NewLine,"Error Occurred ",V.Args.errorno," with description ",V.args.errordesc,V.Local.sError)
v.Global.sEmailBody.Set(v.Local.sError)
f.Intrinsic.Control.CallSub(SendEmail)

f.Intrinsic.Control.CallSub(UnloadAll)


Program.Sub.catchingUA.End

Program.Sub.PlExpMaint.Start
v.Local.sConfFile.Declare(string)
v.Local.sPlList.Declare(string)
v.Local.bCheck.Declare(boolean)
v.Local.icount.Declare(Long)
f.Intrinsic.Control.Try
gui.fPL4ExpMaint.lvwPL.ClearItems
gui.fPL4ExpMaint.lvwSelPL.ClearItems

gui.fExpToConcur..Enabled(False)
'get all PL List and add to PL List view
f.ODBC.Connection!conx.openlocalrecordsetro("rstPL","select RTRIM(PRODUCT_LINE) as PRODUCT_LINE from V_PRODUCT_LINE")
f.intrinsic.control.DoUntil(v.ODBC.conx!rstPL.EOF,=,true)
	
	gui.fPL4ExpMaint.lvwPL.AddListItem(v.ODBC.conx!rstPL.FieldVal!PRODUCT_LINE,v.ODBC.conx!rstPL.FieldVal!PRODUCT_LINE)
	f.ODBC.conx!rstPL.MoveNext
f.intrinsic.Control.Loop
'get PL list from file and add to Selected PL list view
f.Intrinsic.String.Build("{0}\4694_XP2CONCUR\GCG_4694_PLLIST.dat",v.Caller.GlobalDir,v.Local.sConfFile)
f.Intrinsic.file.Exists(v.Local.sConfFile,v.Local.bCheck)
f.Intrinsic.Control.if(v.Local.bCheck,=,true)
	f.Intrinsic.file.File2String(v.Local.sConfFile,v.Local.sPlList)
	f.Data.DataTable.CreateFromString("PopSelPl",v.Local.sPlList,"Name","string","@!@","*!*")
	f.Intrinsic.Control.for(v.Local.iCount,0,v.DataTable.PopSelPl.RowCount--,1)
			gui.fPL4ExpMaint.lvwSelPL.AddListItem(v.DataTable.PopSelPl(v.Local.iCount).Name!fieldval,v.DataTable.PopSelPl(v.Local.iCount).Name!fieldval)
	f.Intrinsic.Control.Next(v.Local.iCount)
	f.Data.DataTable.Close("PopSelPl")
f.Intrinsic.Control.EndIf
gui.fPL4ExpMaint..Show
gui.fPL4ExpMaint..SetFocus

f.Intrinsic.Control.catch
f.Intrinsic.Control.CallSub(catching,"sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.PlExpMaint.End

Program.Sub.cmdSaveConf_Click.Start
v.Local.sLstvw1.Declare(string)
v.Local.sConfFile.Declare(string)
f.Intrinsic.Control.Try
'Save PL listView
gui.fPL4ExpMaint.lvwSelPL.RetrieveAllListItems(v.Local.sLstvw1)
f.Intrinsic.String.Build("{0}\4694_XP2CONCUR\GCG_4694_PLLIST.dat",v.Caller.GlobalDir,v.Local.sConfFile)
f.Intrinsic.file.String2File(v.Local.sConfFile,v.Local.sLstvw1)
f.Intrinsic.Control.If(v.Caller.Switches,=,"M")
	f.Intrinsic.UI.Msgbox("PL List has been successfully saved!")
	gui.fPL4ExpMaint..SetFocus
f.Intrinsic.Control.Else
	gui.fPL4ExpMaint..Visible(false)
	gui.fExpToConcur..Enabled(True)
	gui.fExpToConcur..SetFocus
f.Intrinsic.Control.EndIf
f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.catch
f.Intrinsic.Control.CallSub(catching,"sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.cmdSaveConf_Click.End

Program.Sub.fPL4ExpMaint_UnLoad.Start
f.Intrinsic.Control.If(v.Caller.Switches,=,"M","OR",v.Caller.Switches,=,"X")
	f.Intrinsic.Control.CallSub(UnLoad_all)
f.Intrinsic.Control.Else
	gui.fExpToConcur..Enabled(true)
	gui.fPL4ExpMaint..Visible(false)
	gui.fExpToConcur..SetFocus
f.Intrinsic.Control.EndIf

Program.Sub.fPL4ExpMaint_UnLoad.End

Program.Sub.ExpToConcur.Start
v.Local.sConfFile.Declare(string)
v.Local.sFilePath.Declare(string)
v.Local.sPlList.Declare(string)
v.Local.bCheck.Declare(boolean)
v.Local.sSql.Declare(string)
v.Local.sOut.Declare(string)
v.Local.sOutFile.Declare(string)
v.Local.sDate.Declare(string)
v.Local.sTime.Declare(string)
f.Intrinsic.Control.Try
gui.fExpToConcur..Enabled(False)
'get PL List
f.Intrinsic.UI.InvokeWaitDialog("Loading Product lines")
f.Intrinsic.String.Build("{0}\4694_XP2CONCUR\GCG_4694_PLLIST.dat",v.Caller.GlobalDir,v.Local.sConfFile)
f.Intrinsic.file.Exists(v.Local.sConfFile,v.Local.bCheck)
f.Intrinsic.Control.if(v.Local.bCheck,=,false)
	f.Intrinsic.String.Concat("Execution of the Export to Concur script was ended prematurely because the Product line list config file is missing.",v.Ambient.NewLine,"Please run PL maintenance option from 'Online Systems > Administration > PL Maint for Export to Concur' to select the required product lines and save the config file.",v.Global.sEmailBody)
	f.Intrinsic.UI.Msgbox(v.Global.sEmailBody)
	f.Intrinsic.Control.Exitsub
	gui.fExpToConcur..Enabled(True)
f.Intrinsic.Control.EndIf
v.Local.sFilePath.Set(v.Screen.fExpToConcur!txtExpPath.text)
f.Intrinsic.File.DirExists(v.Local.sFilePath,v.Local.bCheck)

'get file path
f.Intrinsic.Control.If(v.Local.bCheck,=,false)
	f.Intrinsic.string.Build("{0}\4694_XP2CONCUR",v.Caller.GlobalDir,v.Local.sFilePath)
	v.Global.bDefaultPath.Set("True")
f.Intrinsic.Control.EndIf
f.Intrinsic.file.File2String(v.Local.sConfFile,v.Local.sPlList)

f.Intrinsic.String.Replace(v.Local.sPlList,"*!*","','",v.Local.sPlList)
f.Intrinsic.String.Build("'{0}'",v.Local.sPlList,v.Local.sPlList)

'f.Intrinsic.string.Build("select DISTINCT CAST(' ' AS CHAR(64)) AS LST_NAME,CAST('Job' AS CHAR(64)) AS CAT_NAME, CAST(JOB AS CHAR(32)) AS L1,CAST(' ' AS CHAR(32)) AS L2, CAST(' ' AS CHAR(32)) AS L3,CAST(' ' AS CHAR(32)) AS L4,CAST(' ' AS CHAR(32)) AS L5,CAST(' ' AS CHAR(32)) AS L6,CAST(' ' AS CHAR(32)) AS L6, CAST(' ' AS CHAR(32)) AS L7,CAST(' ' AS CHAR(32)) AS L8,CAST(' ' AS CHAR(32)) AS L9, CAST(' ' AS CHAR(32)) AS L10,CAST(' ' AS CHAR(64)) AS VALUE, CAST(' ' AS CHAR(8)) AS ST_DT,CAST(' ' AS CHAR(8)) AS ED_DT,CAST(' ' AS CHAR(1)) AS DEL_LST FROM V_JOB_OPERATIONS WHERE JOB + '-' + SUFFIX IN (Select JOB + '-' + SUFFIX AS JOB_SUFFIX FROM V_JOB_HEADER WHERE PRODUCT_LINE IN ({0}) AND DATE_CLOSED = '1900-01-01') AND FLAG_CLOSED <> 'Y'",v.Local.sPlList,v.Local.sSql)
'f.Data.DataTable.CreateFromSQL("DT1","conx",v.Local.sSql,TRUE)
'f.Intrinsic.string.Build("select DISTINCT CAST(' ' AS CHAR(64)) AS LST_NAME,CAST('Suffix' AS CHAR(64)) AS CAT_NAME, CAST(JOB AS CHAR(32)) AS L1,CAST(SUFFIX AS CHAR(32)) AS L2, CAST(' ' AS CHAR(32)) AS L3,CAST(' ' AS CHAR(32)) AS L4,CAST(' ' AS CHAR(32)) AS L5,CAST(' ' AS CHAR(32)) AS L6,CAST(' ' AS CHAR(32)) AS L6, CAST(' ' AS CHAR(32)) AS L7,CAST(' ' AS CHAR(32)) AS L8,CAST(' ' AS CHAR(32)) AS L9, CAST(' ' AS CHAR(32)) AS L10,CAST(' ' AS CHAR(64)) AS VALUE, CAST(' ' AS CHAR(8)) AS ST_DT,CAST(' ' AS CHAR(8)) AS ED_DT,CAST(' ' AS CHAR(1)) AS DEL_LST FROM V_JOB_OPERATIONS WHERE JOB + '-' + SUFFIX IN (Select JOB + '-' + SUFFIX AS JOB_SUFFIX FROM V_JOB_HEADER WHERE PRODUCT_LINE IN ({0}) AND DATE_CLOSED = '1900-01-01') AND FLAG_CLOSED <> 'Y'",v.Local.sPlList,v.Local.sSql)
'f.Data.DataTable.CreateFromSQL("DT2","conx",v.Local.sSql,TRUE)
'f.Intrinsic.string.Build("select DISTINCT CAST(' ' AS CHAR(64)) AS LST_NAME,CAST('Sequence' AS CHAR(64)) AS CAT_NAME, CAST(JOB AS CHAR(32)) AS L1,CAST(SUFFIX AS CHAR(32)) AS L2, CAST(SEQ AS CHAR(32)) AS L3,CAST(' ' AS CHAR(32)) AS L4,CAST(' ' AS CHAR(32)) AS L5,CAST(' ' AS CHAR(32)) AS L6,CAST(' ' AS CHAR(32)) AS L6, CAST(' ' AS CHAR(32)) AS L7,CAST(' ' AS CHAR(32)) AS L8,CAST(' ' AS CHAR(32)) AS L9, CAST(' ' AS CHAR(32)) AS L10,CAST(' ' AS CHAR(64)) AS VALUE, CAST(' ' AS CHAR(8)) AS ST_DT,CAST(' ' AS CHAR(8)) AS ED_DT,CAST(' ' AS CHAR(1)) AS DEL_LST FROM V_JOB_OPERATIONS WHERE JOB + '-' + SUFFIX IN (Select JOB + '-' + SUFFIX AS JOB_SUFFIX FROM V_JOB_HEADER WHERE PRODUCT_LINE IN ({0}) AND DATE_CLOSED = '1900-01-01') AND FLAG_CLOSED <> 'Y'",v.Local.sPlList,v.Local.sSql)
'f.Data.DataTable.CreateFromSQL("DT3","conx",v.Local.sSql,TRUE)
f.Intrinsic.UI.InvokeWaitDialog("Loading data from Database Tables")
f.Intrinsic.Control.If(v.DataTable.DT1.Exists)
	f.Data.DataTable.Close("DT1")
f.Intrinsic.Control.EndIf
'Just get the Job in the same format as the expected export file format
f.Intrinsic.string.Build("select DISTINCT RTRIM('*Job/Suffix/Sequence v1') AS LST_NAME,RTRIM('*Job/Suffix/Sequence v1') AS CAT_NAME, RTRIM(JOB) AS L1,RTRIM(' ') AS L2, RTRIM(' ') AS L3,RTRIM(' ') AS L4,RTRIM(' ') AS L5,RTRIM(' ') AS L6, RTRIM(' ') AS L7,RTRIM(' ') AS L8,RTRIM(' ') AS L9, RTRIM(' ') AS L10,RTRIM('Job') AS VALUE,RTRIM(' ') AS ST_DT,RTRIM(' ') AS ED_DT,RTRIM(' ') AS DEL_LST FROM V_JOB_OPERATIONS WHERE JOB + '-' + SUFFIX IN (Select JOB + '-' + SUFFIX AS JOB_SUFFIX FROM V_JOB_HEADER WHERE PRODUCT_LINE IN ({0}) AND DATE_CLOSED = '1900-01-01') AND FLAG_CLOSED <> 'Y'",v.Local.sPlList,v.Local.sSql)
f.Data.DataTable.CreateFromSQL("DT1","conx",v.Local.sSql,TRUE)
f.Intrinsic.Control.If(v.DataTable.DT2.Exists)
	f.Data.DataTable.Close("DT2")
f.Intrinsic.Control.EndIf
'just get the job suffix in the same format as the expected export file format
f.Intrinsic.string.Build("select DISTINCT RTRIM('*Job/Suffix/Sequence v1') AS LST_NAME,RTRIM('*Job/Suffix/Sequence v1') AS CAT_NAME, RTRIM(JOB) AS L1,CAST( CASE WHEN RTRIM(SUFFIX) <> '' THEN rtrim(SUFFIX) ELSE '0' END AS VARCHAR(3)) AS L2, RTRIM(' ') AS L3,RTRIM(' ') AS L4,RTRIM(' ') AS L5,RTRIM(' ') AS L6, RTRIM(' ') AS L7,RTRIM(' ') AS L8,RTRIM(' ') AS L9, RTRIM(' ') AS L10,RTRIM('Suffix') AS VALUE, RTRIM(' ') AS ST_DT,RTRIM(' ') AS ED_DT,RTRIM(' ') AS DEL_LST FROM V_JOB_OPERATIONS WHERE JOB + '-' + SUFFIX IN (Select JOB + '-' + SUFFIX AS JOB_SUFFIX FROM V_JOB_HEADER WHERE PRODUCT_LINE IN ({0}) AND DATE_CLOSED = '1900-01-01') AND FLAG_CLOSED <> 'Y'",v.Local.sPlList,v.Local.sSql)
f.Data.DataTable.CreateFromSQL("DT2","conx",v.Local.sSql,TRUE)
f.Intrinsic.Control.If(v.DataTable.DT3.Exists)
	f.Data.DataTable.Close("DT3")
f.Intrinsic.Control.EndIf
'just get the job suffix seq in the same format as the expected export file format
f.Intrinsic.string.Build("select DISTINCT RTRIM('*Job/Suffix/Sequence v1') AS LST_NAME,RTRIM('*Job/Suffix/Sequence v1') AS CAT_NAME, RTRIM(JOB) AS L1,CAST( CASE WHEN RTRIM(SUFFIX) <> '' THEN rtrim(SUFFIX) ELSE '0' END AS VARCHAR(3)) AS L2, RTRIM(SEQ) AS L3,RTRIM(' ') AS L4,RTRIM(' ') AS L5,RTRIM(' ') AS L6, RTRIM(' ') AS L7,RTRIM(' ') AS L8,RTRIM(' ') AS L9, RTRIM(' ') AS L10,RTRIM('Sequence') AS VALUE, RTRIM(' ') AS ST_DT,RTRIM(' ') AS ED_DT,RTRIM(' ') AS DEL_LST FROM V_JOB_OPERATIONS WHERE JOB + '-' + SUFFIX IN (Select JOB + '-' + SUFFIX AS JOB_SUFFIX FROM V_JOB_HEADER WHERE PRODUCT_LINE IN ({0}) AND DATE_CLOSED = '1900-01-01') AND FLAG_CLOSED <> 'Y'",v.Local.sPlList,v.Local.sSql)
f.Data.DataTable.CreateFromSQL("DT3","conx",v.Local.sSql,TRUE)

f.Data.DataTable.Merge("DT2","DT1",FALSE,2)
f.Data.DataTable.Merge("DT3","DT1",FALSE,2)
'merge so they are all in one table. 
'the reason we merge and then perform the blow sort is so that the out put will have the job line and then the job suffix line and then all of the corresponding job suffix seq lines which is the format that the export needs.
F.Data.Dataview.Create("DT1","DTVW",22,"","L1 ASC,L2 ASC,L3 ASC")
f.Data.DataView.ToString("DT1","DTVW",",",v.Ambient.NewLine,v.Local.sOut)

f.Intrinsic.string.format(v.Ambient.Date,"YYYYMMDD",v.Local.sDate)
f.Intrinsic.string.format(v.Ambient.Time,"HHNNSS",v.Local.sTime)

'build file name. Value in position {1} is like a concur ID which the customer provided
f.Intrinsic.String.Build("{0}\list_{1}_openworkorders_{2}{3}.txt",v.Local.sFilePath,"p0043782g8rm",v.Local.sDate,v.Local.sTime,v.local.sOutFile)

f.Intrinsic.File.String2File(v.local.sOutFile,v.Local.sOut)
f.Intrinsic.UI.CloseWaitDialog
f.Intrinsic.String.Build("File has been exported to location '{0}'",v.Local.sFilePath,v.Global.sEmailBody)
f.Intrinsic.UI.Msgbox(v.Global.sEmailBody)
gui.fExpToConcur..SetFocus
gui.fExpToConcur..Enabled(True)
f.Intrinsic.Control.catch
f.Intrinsic.Control.CallSub(catching,"sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.ExpToConcur.End

Program.Sub.GetXPPath.Start
v.Local.sFilePath.Declare(String)
v.Local.sXPPath.Declare(String)
v.Local.bExists.Declare(boolean)
f.Intrinsic.Control.Try
'get the XP path from dat file
f.Intrinsic.string.Build("{0}\4694_XP2CONCUR\GCG_4694_XPPATH.dat",v.Caller.GlobalDir,v.Local.sFilePath)
f.Intrinsic.File.Exists(v.Local.sFilePath,v.Local.bExists)
f.Intrinsic.Control.If(v.Local.bExists,=,true)
	f.Intrinsic.file.File2String(v.Local.sFilePath,v.Local.sXPPath)
f.Intrinsic.Control.Else
	v.Global.bDefaultPath.Set(True)
	f.Intrinsic.string.Build("{0}\4694_XP2CONCUR",v.Caller.GlobalDir,v.Local.sXPPath)
f.Intrinsic.Control.EndIf
f.Intrinsic.Control.If(v.Caller.Switches,=,"O")
	gui.fExpToConcur.txtExpPath.text(v.Local.sXPPath)
	v.Global.sXPPath.Set(v.Local.sXPPath)
f.Intrinsic.Control.ElseIf(v.Caller.Switches,=,"X")
	gui.FXPPath.txtXPPathSave.text(v.Local.sXPPath)
	v.Global.sXPPath.Set(v.Local.sXPPath)
f.Intrinsic.Control.Elseif(v.Caller.Switches,=,"")
	v.Global.sXPPath.Set(v.Local.sXPPath)
f.Intrinsic.Control.EndIf

f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.catch
f.Intrinsic.Control.CallSub(catching,"sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.GetXPPath.End

Program.Sub.SendEmail.Start
v.Local.sEmailList.Declare(String)
f.Intrinsic.Control.Try
f.Global.Security.GetGroupEmails("XP2CONC",v.caller.CompanyCode,v.Local.sEmailList)
f.Intrinsic.string.Replace(v.Local.sEmailList,"*!*","@!@*!*",v.Local.sEmailList)
f.Intrinsic.string.build("*!*{0}",v.Local.sEmailList,v.Local.sEmailList)
'send status email 
f.Global.Messaging.QueueMessage(v.Caller.CompanyCode,,"GCG_4694_ExpForConcur","Export 2 Concur nightly run status report","noreply@loadking.com*!*Export To Concur Notification",v.Local.sEmailList,v.Global.sEmailBody)
f.Intrinsic.Control.End
f.Intrinsic.Control.catch
f.Intrinsic.Control.CallSub(catching,"sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.SendEmail.End

Program.Sub.UnLoad_all.Start
f.ODBC.Connection!conx.Close
f.Intrinsic.Control.End
Program.Sub.UnLoad_all.End

Program.Sub.cmdBrfolder_Click.Start
v.local.sFolder.Declare(string)
v.local.sActFolder.Declare(string)
v.Local.sActFolder.Set(v.Screen.fExpToConcur!txtExpPath.text)
f.Intrinsic.UI.FolderBrowser("Select a Destination Folder",v.Local.sFolder)
f.Intrinsic.Control.If(v.Local.sFolder,<>,"***CANCEL***")
	gui.fExpToConcur.txtExpPath.Text(v.Local.sFolder)
f.Intrinsic.Control.Else	
	gui.fExpToConcur.txtExpPath.Text(v.local.sActFolder)
f.Intrinsic.Control.EndIf
Program.Sub.cmdBrfolder_Click.End

Program.Sub.cmdBrfolderXP_Click.Start
v.local.sFolder.Declare(string)
v.Local.sActFolder.Declare(String)
v.Local.sActFolder.Set(v.Screen.FXPPath!txtXPPathSave.text)
f.Intrinsic.UI.FolderBrowser("Select a Destination Folder",v.Local.sFolder)
f.Intrinsic.Control.If(v.Local.sFolder,<>,"***CANCEL***")
	gui.FXPPath.txtXPPathSave.Text(v.Local.sFolder)
f.Intrinsic.Control.Else	
	gui.fExpToConcur.txtExpPath.Text(v.local.sActFolder)
f.Intrinsic.Control.EndIf
Program.Sub.cmdBrfolderXP_Click.End

Program.Sub.cmdExpPath_Click.Start
gui.fExpToConcur..Enabled(false)

f.Intrinsic.Control.If(v.Screen.fExpToConcur!txtExpPath.text,=,"")
	f.Intrinsic.UI.Msgbox("You Need to select a export path in order to generate the Concur File")
	f.Intrinsic.Control.CallSub(fPL4ExpMaint_UnLoad)
f.Intrinsic.Control.EndIf
f.Intrinsic.Control.CallSub(ExpToConcur)

Program.Sub.cmdExpPath_Click.End

Program.Sub.cmdPLMaint_Click.Start
f.Intrinsic.Control.CallSub(PlExpMaint)
Program.Sub.cmdPLMaint_Click.End

Program.Sub.XPPATH.Start
gui.FXPPath..Enabled(True)
gui.FXPPath..SetFocus
gui.FXPPath..Show
Program.Sub.XPPATH.End

Program.Sub.cmdSavePath_Click.Start
v.Local.sFilePath.Declare(String)
v.Local.sXPPath.Declare(String)
v.Local.bExists.Declare(boolean)
f.Intrinsic.Control.Try

gui.FXPPath..Enabled(false)
'save xp path
f.Intrinsic.string.Build("{0}\4694_XP2CONCUR\GCG_4694_XPPATH.dat",v.Caller.GlobalDir,v.Local.sFilePath)
v.Local.sXPPath.Set(v.Screen.FXPPath!txtXPPathSave.text)
f.Intrinsic.file.DirExists(v.Local.sXPPath,v.Local.bExists)
f.Intrinsic.Control.If(v.Local.bExists,=,false)
	f.Intrinsic.UI.Msgbox("The path specified does not exist! Please enter a valid Fully Qualified path.")
f.Intrinsic.Control.Else
	f.Intrinsic.File.String2File(v.Local.sFilePath,v.Local.sXPPath)
	f.Intrinsic.UI.Msgbox("Export Path has been Saved!")
f.Intrinsic.Control.EndIf
gui.FXPPath..Enabled(True)
gui.FXPPath..SetFocus
f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.catch
f.Intrinsic.Control.CallSub(catching,"sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdSavePath_Click.End

Program.Sub.ExportToConcurUA.Start
v.Local.sConfFile.Declare(string)
v.Local.sFilePath.Declare(string)
v.Local.sPlList.Declare(string)
v.Local.bCheck.Declare(boolean)
v.Local.sSql.Declare(string)
v.Local.sOut.Declare(string)
v.Local.sOutFile.Declare(string)
v.Local.sDate.Declare(string)
v.Local.sTime.Declare(string)
f.Intrinsic.Control.Try
gui.fExpToConcur..Enabled(False)

f.Intrinsic.String.Build("{0}\4694_XP2CONCUR\GCG_4694_PLLIST.dat",v.Caller.GlobalDir,v.Local.sConfFile)
f.Intrinsic.file.Exists(v.Local.sConfFile,v.Local.bCheck)
f.Intrinsic.Control.if(v.Local.bCheck,=,false)
	f.Intrinsic.String.Concat("Execution of the Export to Concur script was ended prematurely because the Product line list config file is missing.",v.Ambient.NewLine,"Please run PL maintenance option from 'Online Systems > Administration > PL Maint for Export to Concur' to select the required product lines and save the config file.",v.Global.sEmailBody)
	f.Intrinsic.Control.GoTo("SkipAll")
f.Intrinsic.Control.EndIf
v.Local.sFilePath.Set(v.Global.sXPPath)
f.Intrinsic.File.DirExists(v.Local.sFilePath,v.Local.bCheck)


f.Intrinsic.Control.If(v.Local.bCheck,=,false)
	f.Intrinsic.string.Build("{0}\4694_XP2CONCUR",v.Caller.GlobalDir,v.Local.sFilePath)
	v.Global.bDefaultPath.Set("True")
f.Intrinsic.Control.EndIf
f.Intrinsic.file.File2String(v.Local.sConfFile,v.Local.sPlList)

f.Intrinsic.String.Replace(v.Local.sPlList,"*!*","','",v.Local.sPlList)
f.Intrinsic.String.Build("'{0}'",v.Local.sPlList,v.Local.sPlList)

'same as the ExpToConcur Subroutine.. just has some other things to take into account when running unattended

'f.Intrinsic.string.Build("select DISTINCT CAST(' ' AS CHAR(64)) AS LST_NAME,CAST('Job' AS CHAR(64)) AS CAT_NAME, CAST(JOB AS CHAR(32)) AS L1,CAST(' ' AS CHAR(32)) AS L2, CAST(' ' AS CHAR(32)) AS L3,CAST(' ' AS CHAR(32)) AS L4,CAST(' ' AS CHAR(32)) AS L5,CAST(' ' AS CHAR(32)) AS L6,CAST(' ' AS CHAR(32)) AS L6, CAST(' ' AS CHAR(32)) AS L7,CAST(' ' AS CHAR(32)) AS L8,CAST(' ' AS CHAR(32)) AS L9, CAST(' ' AS CHAR(32)) AS L10,CAST(' ' AS CHAR(64)) AS VALUE, CAST(' ' AS CHAR(8)) AS ST_DT,CAST(' ' AS CHAR(8)) AS ED_DT,CAST(' ' AS CHAR(1)) AS DEL_LST FROM V_JOB_OPERATIONS WHERE JOB + '-' + SUFFIX IN (Select JOB + '-' + SUFFIX AS JOB_SUFFIX FROM V_JOB_HEADER WHERE PRODUCT_LINE IN ({0}) AND DATE_CLOSED = '1900-01-01') AND FLAG_CLOSED <> 'Y'",v.Local.sPlList,v.Local.sSql)
'f.Data.DataTable.CreateFromSQL("DT1","conx",v.Local.sSql,TRUE)
'f.Intrinsic.string.Build("select DISTINCT CAST(' ' AS CHAR(64)) AS LST_NAME,CAST('Suffix' AS CHAR(64)) AS CAT_NAME, CAST(JOB AS CHAR(32)) AS L1,CAST(SUFFIX AS CHAR(32)) AS L2, CAST(' ' AS CHAR(32)) AS L3,CAST(' ' AS CHAR(32)) AS L4,CAST(' ' AS CHAR(32)) AS L5,CAST(' ' AS CHAR(32)) AS L6,CAST(' ' AS CHAR(32)) AS L6, CAST(' ' AS CHAR(32)) AS L7,CAST(' ' AS CHAR(32)) AS L8,CAST(' ' AS CHAR(32)) AS L9, CAST(' ' AS CHAR(32)) AS L10,CAST(' ' AS CHAR(64)) AS VALUE, CAST(' ' AS CHAR(8)) AS ST_DT,CAST(' ' AS CHAR(8)) AS ED_DT,CAST(' ' AS CHAR(1)) AS DEL_LST FROM V_JOB_OPERATIONS WHERE JOB + '-' + SUFFIX IN (Select JOB + '-' + SUFFIX AS JOB_SUFFIX FROM V_JOB_HEADER WHERE PRODUCT_LINE IN ({0}) AND DATE_CLOSED = '1900-01-01') AND FLAG_CLOSED <> 'Y'",v.Local.sPlList,v.Local.sSql)
'f.Data.DataTable.CreateFromSQL("DT2","conx",v.Local.sSql,TRUE)
'f.Intrinsic.string.Build("select DISTINCT CAST(' ' AS CHAR(64)) AS LST_NAME,CAST('Sequence' AS CHAR(64)) AS CAT_NAME, CAST(JOB AS CHAR(32)) AS L1,CAST(SUFFIX AS CHAR(32)) AS L2, CAST(SEQ AS CHAR(32)) AS L3,CAST(' ' AS CHAR(32)) AS L4,CAST(' ' AS CHAR(32)) AS L5,CAST(' ' AS CHAR(32)) AS L6,CAST(' ' AS CHAR(32)) AS L6, CAST(' ' AS CHAR(32)) AS L7,CAST(' ' AS CHAR(32)) AS L8,CAST(' ' AS CHAR(32)) AS L9, CAST(' ' AS CHAR(32)) AS L10,CAST(' ' AS CHAR(64)) AS VALUE, CAST(' ' AS CHAR(8)) AS ST_DT,CAST(' ' AS CHAR(8)) AS ED_DT,CAST(' ' AS CHAR(1)) AS DEL_LST FROM V_JOB_OPERATIONS WHERE JOB + '-' + SUFFIX IN (Select JOB + '-' + SUFFIX AS JOB_SUFFIX FROM V_JOB_HEADER WHERE PRODUCT_LINE IN ({0}) AND DATE_CLOSED = '1900-01-01') AND FLAG_CLOSED <> 'Y'",v.Local.sPlList,v.Local.sSql)
'f.Data.DataTable.CreateFromSQL("DT3","conx",v.Local.sSql,TRUE)
f.Intrinsic.string.Build("select DISTINCT RTRIM('*Job/Suffix/Sequence v1') AS LST_NAME,RTRIM('*Job/Suffix/Sequence v1') AS CAT_NAME, RTRIM(JOB) AS L1,RTRIM(' ') AS L2, RTRIM(' ') AS L3,RTRIM(' ') AS L4,RTRIM(' ') AS L5,RTRIM(' ') AS L6, RTRIM(' ') AS L7,RTRIM(' ') AS L8,RTRIM(' ') AS L9, RTRIM(' ') AS L10,RTRIM('Job') AS VALUE,RTRIM(' ') AS ST_DT,RTRIM(' ') AS ED_DT,RTRIM(' ') AS DEL_LST FROM V_JOB_OPERATIONS WHERE JOB + '-' + SUFFIX IN (Select JOB + '-' + SUFFIX AS JOB_SUFFIX FROM V_JOB_HEADER WHERE PRODUCT_LINE IN ({0}) AND DATE_CLOSED = '1900-01-01') AND FLAG_CLOSED <> 'Y'",v.Local.sPlList,v.Local.sSql)
f.Data.DataTable.CreateFromSQL("DT1","conx",v.Local.sSql,TRUE)
f.Intrinsic.string.Build("select DISTINCT RTRIM('*Job/Suffix/Sequence v1') AS LST_NAME,RTRIM('*Job/Suffix/Sequence v1') AS CAT_NAME, RTRIM(JOB) AS L1,CAST( CASE WHEN RTRIM(SUFFIX) <> '' THEN rtrim(SUFFIX) ELSE '0' END AS VARCHAR(3)) AS L2, RTRIM(' ') AS L3,RTRIM(' ') AS L4,RTRIM(' ') AS L5,RTRIM(' ') AS L6, RTRIM(' ') AS L7,RTRIM(' ') AS L8,RTRIM(' ') AS L9, RTRIM(' ') AS L10,RTRIM('Suffix') AS VALUE, RTRIM(' ') AS ST_DT,RTRIM(' ') AS ED_DT,RTRIM(' ') AS DEL_LST FROM V_JOB_OPERATIONS WHERE JOB + '-' + SUFFIX IN (Select JOB + '-' + SUFFIX AS JOB_SUFFIX FROM V_JOB_HEADER WHERE PRODUCT_LINE IN ({0}) AND DATE_CLOSED = '1900-01-01') AND FLAG_CLOSED <> 'Y'",v.Local.sPlList,v.Local.sSql)
f.Data.DataTable.CreateFromSQL("DT2","conx",v.Local.sSql,TRUE)
f.Intrinsic.string.Build("select DISTINCT RTRIM('*Job/Suffix/Sequence v1') AS LST_NAME,RTRIM('*Job/Suffix/Sequence v1') AS CAT_NAME, RTRIM(JOB) AS L1,CAST( CASE WHEN RTRIM(SUFFIX) <> '' THEN rtrim(SUFFIX) ELSE '0' END AS VARCHAR(3)) AS L2, RTRIM(SEQ) AS L3,RTRIM(' ') AS L4,RTRIM(' ') AS L5,RTRIM(' ') AS L6, RTRIM(' ') AS L7,RTRIM(' ') AS L8,RTRIM(' ') AS L9, RTRIM(' ') AS L10,RTRIM('Sequence') AS VALUE, RTRIM(' ') AS ST_DT,RTRIM(' ') AS ED_DT,RTRIM(' ') AS DEL_LST FROM V_JOB_OPERATIONS WHERE JOB + '-' + SUFFIX IN (Select JOB + '-' + SUFFIX AS JOB_SUFFIX FROM V_JOB_HEADER WHERE PRODUCT_LINE IN ({0}) AND DATE_CLOSED = '1900-01-01') AND FLAG_CLOSED <> 'Y'",v.Local.sPlList,v.Local.sSql)
f.Data.DataTable.CreateFromSQL("DT3","conx",v.Local.sSql,TRUE)

f.Data.DataTable.Merge("DT2","DT1",FALSE,2)
f.Data.DataTable.Merge("DT3","DT1",FALSE,2)

F.Data.Dataview.Create("DT1","DTVW",22,"","L1 ASC,L2 ASC,L3 ASC")
f.Data.DataView.ToString("DT1","DTVW",",",v.Ambient.NewLine,v.Local.sOut)

f.Intrinsic.string.format(v.Ambient.Date,"YYYYMMDD",v.Local.sDate)
f.Intrinsic.string.format(v.Ambient.Time,"HHNNSS",v.Local.sTime)


f.Intrinsic.String.Build("{0}\list_{1}_openworkorders_{2}{3}.txt",v.Local.sFilePath,"p0043782g8rm",v.Local.sDate,v.Local.sTime,v.local.sOutFile)

f.Intrinsic.File.String2File(v.local.sOutFile,v.Local.sOut)
f.Intrinsic.Control.If(V.Global.bDefaultPath,=,True)
	f.Intrinsic.String.Build("File has been exported to location '{0}'.{1} The file was exported to a default location because the original location selected is not accessible.",v.Local.sFilePath,v.Ambient.NewLine,v.Global.sEmailBody)
f.Intrinsic.Control.Else
	f.Intrinsic.String.Build("File has been exported to location '{0}'",v.Local.sFilePath,v.Global.sEmailBody)
f.Intrinsic.Control.EndIf

'f.Intrinsic.UI.Msgbox(v.Global.sEmailBody)
f.Intrinsic.Control.Label("SkipAll")
'send email
f.Intrinsic.Control.CallSub(SendEmail)
f.intrinsic.Control.CallSub(Unload_all)
f.Intrinsic.Control.catch
f.Intrinsic.Control.CallSub(catchingUA,"sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.ExportToConcurUA.End

Program.Sub.cmdSaveXPFrmMaint_Click.Start
v.Local.sFilePath.Declare(String)
v.Local.sXPPath.Declare(String)
v.Local.bExists.Declare(boolean)
f.Intrinsic.Control.Try

gui.fExpToConcur..Enabled(false)
f.Intrinsic.string.Build("{0}\4694_XP2CONCUR\GCG_4694_XPPATH.dat",v.Caller.GlobalDir,v.Local.sFilePath)
v.Local.sXPPath.Set(v.Screen.fExpToConcur!txtExpPath.text)
f.Intrinsic.file.DirExists(v.Local.sXPPath,v.Local.bExists)
f.Intrinsic.Control.If(v.Local.bExists,=,false)
	f.Intrinsic.UI.Msgbox("The path specified does not exist! Please enter a valid Fully Qualified path.")
f.Intrinsic.Control.Else
	f.Intrinsic.File.String2File(v.Local.sFilePath,v.Local.sXPPath)
	f.Intrinsic.UI.Msgbox("Export Path has been Saved!")
f.Intrinsic.Control.EndIf
gui.fExpToConcur..Enabled(True)
gui.fExpToConcur..SetFocus
f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.catch
f.Intrinsic.Control.CallSub(catching,"sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdSaveXPFrmMaint_Click.End
